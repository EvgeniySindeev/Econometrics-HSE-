a <- available.packages()
head(rownames(a), 3)
install.packages(c("slidify", "ggplot2", "devtools"))
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite()
q()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures", "AnnotationDbi"))
install.packages("slidify")
q()
source("http://bioconductor.org/biocLite.R")
biocLite()
q()
source("http://bioconductor.org/biocLite.R")
biocLite()
sessionInfo()
sudo apt-get install -y libcurl-dev libxml2-dev
biocLite(
biocLite(XML)
biocLite(XML)
q()
library(ggplot2)
search()
source("http://bioconductor.org/biocLite.R")
biocLite()
q()
find.package("devtools")
install.packages("devtools")
library(devtools)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
find_rtools()
library(KernSmooth)
add2 <- function(x, y)
{
x+y
}
add2(3, 5)
aboce <- function(x, n)
{
use <- x > n
x[use]
}
x <- 1:20
above <- function(x, n)
{
use <- x > n
x[use]
}
above(x, 12)
above <- function(x, n = 10)
{
use <- x > n
x[use]
}
above(x)
columnmean <- function(y)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNa = TRUE)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[, i], na.rm = removeNa)
}
means
}
columnmean(airquality)
ls(environment(nLL))
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
lapply(x, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt), elt[, 1])
lapply(x, function(elt) elt[, 1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
sapply(x, mean)
x <- matrix(rnorm(200), 20, 20)
apply(x, 2, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 2, sum)
apply(x, 1, sum)
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
a <- arrAY(RNORM(2*2*10), c(2, 2, 10))
a <- arrAy(RNORM(2*2*10), c(2, 2, 10))
a <- array(RNORM(2*2*10), c(2, 2, 10))
a <- array(rnorm(2*2*10), c(2, 2, 10))
apply(a, c(1, 2), mean)
rowMeand(a, dims = 2)
x <-list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, sd)
{}
noise <- function(n, mean, sd)
{rnorm(n, mean, sd)}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x), colMeans(x[, c("Oxone", "Solar,R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Oxone", "Solar,R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Oxone", "Solar,R", "Wind")]))
rowSums = apply(x, 1, sum)
x <- matrix(rnomr(200), 20, 10)
x <- matrix(rnorm(200), 20, 10)
rowSums = apply(x, 1, sum)
rowMeans = apply(x, 1, mean)
colSums = apply(x, 2, sum)
colMeans = apply(x, 2, mean)
lapply(s, function(x) colMeans(x[, c("Oxone", "Solar,R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Oxone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
str(split(x, list(fl1, fl2)))
fl1 <- gl(2, 5)
f1 <- gl(2, 5)
f2 <- gl(5, 2)
x <= rnorm(10)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2)), drop = TRUE)
str(split(x, list(f1, f2), drop = TRUE))
mean(x)
clear()
mean(x)
traceback()
View(a)
x = NA
mean(x)
mean(j)
traceback()
lm(x ~ j)
traceback()
debug(lm)
lm(x ~ j)
debug(ls)
ls()
q
ls()
quit
q
close
quit
q
q
quit
as
q
close()
quit()
?
sas
Q
debug(ls)
Ls
ls()
Q
x = -9
y = 4
x/y
data(mtcars)
model <- lm(mtcars, mpg~disp + hp + wt + am)
model <- lm(data = mtcars, mpg~disp + hp + wt + am)
model
beta_hat <- coef(model)
y <- mtcars$mpg
RSS <- deviance(model)
TSS <- sum( (y - mean(y))^2 )
RSS
TSS
ESS <- TSS -RSS
R2 <- ESS/TSS
R2
round(R2, 2)
?mtcars
round(2.159271, 2)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.csv")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
tolower(names(cameraData))
splitNames = strsplit(names(cameraData),"\\.")
splitNames[[5]]
splitNames[[6]]
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
head(mylist)
mylist[1]
mylist$letters
mylist[[1]]
splitNames[[6]][1]
firstElement <- function(x){x[1]}
sapply(splitNames,firstElement)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv")
download.file(fileUrl2,destfile="./data/solutions.csv")
reviews <- read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews,2)
head(solutions,2)
names(reviews)
sub("_","",names(reviews),)
testName <- "this_is_a_test"
sub("_","",testName)
gsub("_","",testName)
grep("Alameda",cameraData$intersection)
table(grepl("Alameda",cameraData$intersection))
cameraData2 <- cameraData[!grepl("Alameda",cameraData$intersection),]
grep("Alameda",cameraData$intersection,value=TRUE)
grep("JeffStreet",cameraData$intersection)
length(grep("JeffStreet",cameraData$intersection))
library(stringr)
nchar("Jeffrey Leek")
substr("Jeffrey Leek",1,7)
paste("Jeffrey","Leek")
paste0("Jeffrey","Leek")
^i think
morning$
well they had something this morning
then had to catch a tram home in the morning
dog obedience school in the morning
and yes happy birthday i forgot to say it earlier this morning
I walked in the rain this morning
good morning
setwd("C:/Users/outsider/Desktop/RProjects/Econometrics-HSE-/lab_03")
library("memisc")
library("lmtest")
library("ggplot2")
library("dplyr")
library("foreign")
library("vcd")
library("devtools")
library("hexbin")
library("pander")
library("sjPlot")
library("knitr")
h <- diamonds
glimpse(h)
qplot(h, carat, price)
qplot(data = h, carat, price)
qplot(data = h, log(carat), log(price))
bg <- qplot(data = h, log(carat), log(price))
bg + geom_hex()
f <- read.csv("flats_moscow.txt", sep = "\t", header = TRUE, dec = ".")
glimpse(F)
glimpse(f)
qplot(data = f, totsp, price)
str(f)
qplot(data = f, log(totsp), log(price))
mosaic(data = f, ~walk + brick + floor, shade = TRUE)
f <- mutate_each(f, "factor", walk, brick, floor, code)
glimpse(f)
glimpse(diamands)
glimpse(diamonds)
qplot(data = f, log(price))
qplot(data = f, log(price), fill = brick)
qplot(data = f, log(price), fill = brick, position = "dodge")
qplot(data = f, log(price), fill = brick, geom = "density")
qplot(data = f, log(price), fill = brick, geom = "density", alpha = 0.5)
g2 <- qplot(data = f, log(price), fill = brick, geom = "density", alpha = 0.5)
g2 + face_grid(walk~floor)
g2 + facet_grid(walk~floor)
model_1 <- lm(data = f, log(price)~log(totsp)~brick)
model_0 <- lm(data = f, log(price)~log(totsp))
model_1 <- lm(data = f, log(price)~log(totsp)+brick)
model_2 <- lm(data = f, log(price)~log(totsp)+brick+brick:log(totsp))
nw <- data.frame(totsp=c(60, 60), brick = factor(c(1, 0)))
nw
predict(model_2, newdata = nw )
exp(model_2, newdata = nw)
exp(predict(model_2, newdata = nw))
predict(model_2, newdata=nw, interval="confidence")
exp(predict(model_2, newdata=nw, interval="confidence"))
predict(model_2, newdata = nw, interval="predictive")
exp(predict(model_2, newdata = nw, interval="predictive"))
predict(model_2, newdata = nw, interval="predictive")
predict(model_2, newdata = nw, interval="prediction")
exp(predict(model_2, newdata = nw, interval="prediction"))
waldtest(model_0, model_1)
f <- diamonds
summary(f)
?diamonds
diamonds
qplot(data = df, log(price), fill=clarity, geom = "density")
library(qplot)
library(ggplot2)
qplot(data = df, log(price), fill=clarity, geom = "density")
library('ggplot2')
qplot(data = df, log(price), fill=clarity, geom = "density")
qplot(data = df, log(price), fill=clarity, geom = "density", alpha = 0.5) + facet_grid(~clarity)
df <- diamonds
qplot(data = df, log(price), fill=clarity, geom = "density")
qplot(data = df, log(price), fill=clarity, geom = "density", alpha = 0.5) + facet_grid(~clarity)
qplot(data = df, log(price), fill=clarity, geom = "density", alpha = 0.5) + facet_wrap(~clarity)
qplot(data=df, log(carat), log(price), color = clarity) + facet_wrap(~cut)
qplot(data=df, log(carat), price, color = clarity) + facet_wrap(~cut)
?diamonds
